/**
 * @Project:Archermindreader
 * @ClassName:BookPageStyle
 * @Version 1.0
 * @Author minmin.guo
 * @Update shaojian.ni
 * @Date:2012.4.19
 * Copyright (C) 2012 The Android Open Source Project. 
 */
package com.archermind.load;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.text.DecimalFormat;
import java.util.Vector;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Align;

public class BookPageStyle {

	private File mBookfile = null;
	private MappedByteBuffer mMbBuf = null;
	private int mMbBufLen = 0;// total length
	private int mMbBufBegin = 0;// current length
	private int mMbBufEnd = 0;
	private String mStrCharsetName = "GBK";
	private Bitmap mBookbg = null;
	private int mWidth;
	private int mHeight;

	private Vector<String> mLines = new Vector<String>();

	private int mFontSize = 24;
	private int mTextColor = Color.BLACK;
	private int mBackColor = 0xffff9e85; // background color
	private int mMarginWidth = 15; // edge
	private int mMarginHeight = 20;

	private int mLineCount; // the number of rows displayed per page
	private float mVisibleHeight; // height of content
	private float mVisibleWidth; // width of content
	private boolean mIsfirstPage, mIslastPage;

	private Paint mPaint;

	// Schedule format
	DecimalFormat df = new DecimalFormat("##.##");

	public BookPageStyle(int w, int h) {

		mWidth = w;
		mHeight = h;
		mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
		mPaint.setTextAlign(Align.LEFT);
		mPaint.setTextSize(mFontSize);
		mPaint.setColor(mTextColor);
		mVisibleWidth = mWidth - mMarginWidth * 2;
		mVisibleHeight = mHeight - mMarginHeight * 2;
		mLineCount = (int) (mVisibleHeight / mFontSize);
	}

	public void openbook(String strFilePath) throws IOException {
		mBookfile = new File(strFilePath);
		long lLen = mBookfile.length();
		mMbBufLen = (int) lLen;
		mMbBuf = new RandomAccessFile(mBookfile, "r").getChannel().map(
				FileChannel.MapMode.READ_ONLY, 0, lLen);
	}

	// read previous paragraph
	protected byte[] readParagraphBack(int nFromPos) {
		int nEnd = nFromPos;
		int i;
		byte b0, b1;
		if (mStrCharsetName.equals("UTF-16LE")) {
			i = nEnd - 2;
			while (i > 0) {
				b0 = mMbBuf.get(i);
				b1 = mMbBuf.get(i + 1);
				if (b0 == 0x0a && b1 == 0x00 && i != nEnd - 2) {
					i += 2;
					break;
				}
				i--;
			}

		} else if (mStrCharsetName.equals("UTF-16BE")) {
			i = nEnd - 2;
			while (i > 0) {
				b0 = mMbBuf.get(i);
				b1 = mMbBuf.get(i + 1);
				if (b0 == 0x00 && b1 == 0x0a && i != nEnd - 2) {
					i += 2;
					break;
				}
				i--;
			}
		} else {
			i = nEnd - 1;
			while (i > 0) {
				b0 = mMbBuf.get(i);
				if (b0 == 0x0a && i != nEnd - 1) {
					i++;
					break;
				}
				i--;
			}
		}
		if (i < 0)
			i = 0;
		int nParaSize = nEnd - i;
		int j;
		byte[] mBufs = new byte[nParaSize];
		for (j = 0; j < nParaSize; j++) {
			mBufs[j] = mMbBuf.get(i + j);
		}
		return mBufs;
	}

	// read next paragraph
	protected byte[] readParagraphForward(int nFromPos) {
		int nStart = nFromPos;
		int i = nStart;
		byte b0, b1;
		// wrap by encoding format
		if (mStrCharsetName.equals("UTF-16LE")) {
			while (i < mMbBufLen - 1) {
				b0 = mMbBuf.get(i++);
				b1 = mMbBuf.get(i++);
				if (b0 == 0x0a && b1 == 0x00) {
					break;
				}
			}
		} else if (mStrCharsetName.equals("UTF-16BE")) {
			while (i < mMbBufLen - 1) {
				b0 = mMbBuf.get(i++);
				b1 = mMbBuf.get(i++);
				if (b0 == 0x00 && b1 == 0x0a) {
					break;
				}
			}
		} else {
			while (i < mMbBufLen) {
				b0 = mMbBuf.get(i++);
				if (b0 == 0x0a) {
					break;
				}
			}
		}
		int nParaSize = i - nStart;
		byte[] mBufs = new byte[nParaSize];
		for (i = 0; i < nParaSize; i++) {
			mBufs[i] = mMbBuf.get(nFromPos + i);
		}
		return mBufs;
	}

	protected Vector<String> pageDown() {
		String strParagraph = "";
		Vector<String> lines = new Vector<String>();
		while (lines.size() < mLineCount && mMbBufEnd < mMbBufLen) {
			byte[] mParaBufs = readParagraphForward(mMbBufEnd);
			mMbBufEnd += mParaBufs.length;
			try {
				strParagraph = new String(mParaBufs, mStrCharsetName);
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			String strReturn = "";
			if (strParagraph.indexOf("\r\n") != -1) {
				strReturn = "\r\n";
				strParagraph = strParagraph.replaceAll("\r\n", "");
			} else if (strParagraph.indexOf("\n") != -1) {
				strReturn = "\n";
				strParagraph = strParagraph.replaceAll("\n", "");
			}

			if (strParagraph.length() == 0) {
				lines.add(strParagraph);
			}
			while (strParagraph.length() > 0) {
				int nSize = mPaint.breakText(strParagraph, true, mVisibleWidth,
						null);
				lines.add(strParagraph.substring(0, nSize));
				strParagraph = strParagraph.substring(nSize);
				if (lines.size() >= mLineCount) {
					break;
				}
			}
			if (strParagraph.length() != 0) {
				try {
					mMbBufEnd -= (strParagraph + strReturn)
							.getBytes(mStrCharsetName).length;
				} catch (UnsupportedEncodingException e) {
					e.printStackTrace();
				}
			}
		}
		return lines;
	}

	protected void pageUp() {
		if (mMbBufBegin < 0) {
			mMbBufBegin = 0;
		}
		Vector<String> lines = new Vector<String>();
		String strParagraph = "";
		while (lines.size() < mLineCount && mMbBufBegin > 0) {
			Vector<String> paraLines = new Vector<String>();
			byte[] mParaBufs = readParagraphBack(mMbBufBegin);
			mMbBufBegin -= mParaBufs.length;
			try {
				strParagraph = new String(mParaBufs, mStrCharsetName);
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			strParagraph = strParagraph.replaceAll("\r\n", "");
			strParagraph = strParagraph.replaceAll("\n", "");

			if (strParagraph.length() == 0) {
				paraLines.add(strParagraph);
			}
			while (strParagraph.length() > 0) {
				int nSize = mPaint.breakText(strParagraph, true, mVisibleWidth,
						null);
				paraLines.add(strParagraph.substring(0, nSize));
				strParagraph = strParagraph.substring(nSize);
			}
			lines.addAll(0, paraLines);
		}
		while (lines.size() > mLineCount) {
			try {
				mMbBufBegin += lines.get(0).getBytes(mStrCharsetName).length;
				lines.remove(0);
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		mMbBufEnd = mMbBufBegin;
		return;
	}

	protected void prePage() throws IOException {
		if (mMbBufBegin <= 0) {
			mMbBufBegin = 0;
			mIsfirstPage = true;
			return;
		} else {
			mIsfirstPage = false;
		}
		mLines.clear();
		pageUp();
		mLines = pageDown();
	}

	public void nextPage() throws IOException {
		if (mMbBufEnd >= mMbBufLen) {
			mIslastPage = true;
			return;
		} else {
			mIslastPage = false;
		}
		mLines.clear();
		mMbBufBegin = mMbBufEnd;
		mLines = pageDown();
	}

	public void onDraw(Canvas c) {
		if (mLines.size() == 0) {
			mLines = pageDown();
		}
		if (mLines.size() > 0) {
			if (mBookbg == null)
				c.drawColor(mBackColor);
			else
				c.drawBitmap(mBookbg, 0, 0, null);
			int y = mMarginHeight;
			for (String strLine : mLines) {
				y += mFontSize;
				c.drawText(strLine, mMarginWidth, y, mPaint);
			}
		}
		float fPercent = (float) (mMbBufBegin * 1.0 / mMbBufLen);
		String strPercent = df.format(fPercent * 100) + "%";
		int nPercentWidth = (int) mPaint.measureText("999.9%") + 1;
		c.drawText(strPercent, mWidth - nPercentWidth, mHeight - 5, mPaint);
	}

	public void setBgBitmap(Bitmap BG) {
		mBookbg = BG;
	}

	public boolean isfirstPage() {
		return mIsfirstPage;
	}

	public boolean islastPage() {
		return mIslastPage;
	}
}
